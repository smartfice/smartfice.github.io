{"meta":{"title":"Monkey'blog","subtitle":"welcome to monkey","description":"smartfice python","author":"smartfice","url":"http://smartfice.com"},"pages":[{"title":"about","date":"2017-09-30T06:51:06.000Z","updated":"2017-09-30T06:51:06.629Z","comments":true,"path":"about/index.html","permalink":"http://smartfice.com/about/index.html","excerpt":"","text":""},{"title":"分类","date":"2017-10-08T08:55:36.000Z","updated":"2017-10-08T08:56:34.887Z","comments":true,"path":"categories/index.html","permalink":"http://smartfice.com/categories/index.html","excerpt":"","text":""},{"title":"images","date":"2017-10-05T13:58:38.000Z","updated":"2017-10-05T13:58:38.059Z","comments":true,"path":"images/index.html","permalink":"http://smartfice.com/images/index.html","excerpt":"","text":""},{"title":"tags","date":"2017-10-08T08:57:16.000Z","updated":"2017-10-08T08:57:47.425Z","comments":true,"path":"tags/index.html","permalink":"http://smartfice.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"django mysql数据库错误相关问题","slug":"mysql","date":"2017-10-08T10:14:51.807Z","updated":"2017-10-08T10:14:28.850Z","comments":true,"path":"mysql/","link":"","permalink":"http://smartfice.com/mysql/","excerpt":"","text":"1、当我把 DEBUG = True设为False的时候运行 Python manage.py runserver 的时候报错 ： CommandError: You must set settings.ALLOWED_HOSTS if DEBUG is False.解决方案：ALLOWED_HOSTS = [‘127.0.0.1’, ‘localhost’] 2、报错信息： ModelForm Creating a ModelForm without either the ‘fields’ attribute or the ‘exclude’ attributeis prohibited; form AuthorForm needs updating. 解决方案：class AuthorForm(ModelForm):class Meta:model = Authorfields = “all” 3、报错信息： CSRF token missing or incorrect解决方案：第一种方法： 第一步、 在 templete 中, 为每个 POST form 增加一个 {csrf_token 第二步、在 view 中, 使用 django.template.RequestContext 而不是 Context.render_to_response, 默认使用 Context. 需要改成 RequestContext.return render_to_response(‘systemofdingh/modify.html’, {‘form’: orderModelForm(instance=orderModify)},context_instance=RequestContext(request))第二中方法： settings.py 中 MIDDLEWARE_CLASSES 中 注释掉’django.middleware.csrf.CsrfViewMiddleware’ 在你的views.py 的方法上加上 @csrf_exempt 装饰 (需要 from django.views.decorators.csrf import csrf_exempt) 4、You are trying to add a non-nullable field ‘orderID’ to ordermodel without a default; we can’t do that (the database needs something to populate existing rows).Please select a fix: Provide a one-off default now (will be set on all existing rows) Quit, and let me add a default in models.py 解决方案: 删除migrate文件，然后重新来Django :queryset的长度查询： len(queryset)model对象转换成dict : model_to_dict问题：字段修改属性发生错误1&gt;12345&gt;python manage.py makemigrationsYou are trying to add a non-nullable field 'price_monthly' to product without a default; we can't do that (the database needs something to populate existing rows).Please select a fix: 1) Provide a one-off default now (will be set on all existing rows) 2) Quit, and let me add a default in models.pySelect an option: {这个可能是之前已创建了表中的一条记录，之后模型中增加了一个非空的字段，但是原来已经存在的记录没有这个值}2&gt;123&gt;python manage.py migrate... ...raise errorclass(errno, errorvalue)django.db.utils.ProgrammingError: (1146, \"Table 'lab_data.bigdata_postgraduate_research_directions' doesn't exist\") {这个是因为在字段中添加了blank=True或者 null=True引起的}3&gt; 1234567&gt;python manage.py makemigrationsYou are trying to change the nullable field 'job_title' on professor to non-nullable without a default; we can't do that (the database needs something to populate existing rows).Please select a fix: 1) Provide a one-off default now (will be set on all existing rows) 2) Ignore for now, and let me handle existing rows with NULL myself (e.g. adding a RunPython or RunSQL operation in the new migration file before the AlterField operation) 3) Quit, and let me add a default in models.pySelect an option: {这个是将模型中的null=True删除了之后产生的错误}1&gt;原因解释： 1234561. The migrations system is designed so that a single migration can be applied to more than one database. For example, you could have a development version, a staging version, and one or more production versions. That&apos;s whymaking the migration is a distinct step from applying the migration, and whymakemgirations can&apos;t just look at the currently active database to see that it doesn&apos;t have any rows. What if you then try to apply the migration to a database that does?The solution in your case is simple: since there are no rows, option 1 (setting a default on all existing rows) won&apos;t do anything at all. So choose option 1, and any value you like.[Django 1.7.1 requires a Default value for field - but no entry is in database. Why?]2. Django adds a default &quot;id&quot; field to every model, you don&apos;t need an extra &quot;twitbot_id&quot; in your model. If a surrogate primary key is all you need, forget about &quot;twitbot_id&quot; because it will be a duplicate of the auto-generated &quot;id&quot;. Seehttps://docs.djangoproject.com/en/dev/topics/db/models/#automatic-primary-key-fieldsIf you add this and you already have TwitterBot objects in your database you must provide a default value to populate this column for existing rows in the database.[Can&apos;t seem to lose this error: “You are trying to add a non-nullable field”] 如果你跟我一样是因为之前建好表a后，又创建一个表b作为a的父类，a中只有pass，那么因为表a已经创建，其中有数据，当a迁移时就会出现新表不能为null且没有指定默认值时就会出现这种错误。 解决方案：1&gt;在基类b中添加允许为空或者添加默认值，并设置b不建表（meta中的abstract = true）12345678910class Base(models.Model): ''' 基类 ''' title = models.CharField(max_length=150, null=True) content = models.TextField(null=True) time_stamp = models.DateTimeField(auto_now_add=True, default=timezone.now()) link = models.URLField(blank=True, verbose_name='url_link') class Meta: abstract = True Note:DataTimeField好像与其它的不一样，不好改！1&gt;2&gt;3&gt;删除所有migrate文件(不用移除整个文件夹)，然后重来 问题：manytomanyfeild没有默认值django admin gives warning “Field ‘X’ doesn’t have a default value” 问题：添加元属性发生错误12raise InternalError(errno, errorvalue)django.db.utils.InternalError: (1017, \"Can't find file: '.\\\\lab_data\\\\people_patent_prizes.frm' (errno: 2 -No such file or directory)\") {模型类中增加class Meta:db_table=’People’使数据库中对应的表名修改成了People，原来的表间联系可能破坏了}解决方案：删除所有migrate文件(不用移除整个文件夹)，然后重来 问题：表中字段不存在“Unknown column ‘name’ in ‘field list’” django中创建了表professor继承了表people的字段，并且在后台可以看到，但实际在数据库中不存在（数据库中查询可看到） 出现问题原因： model中编辑的字段没有在数据库对应的表里创建（原因可能是字段是继承自父类，出现的什么问题？） 数据库中查看表中的字段： migration文件出了什么问题？导致没有同步到数据库（表都没创建）解决方案1：在数据库中手动添加没有创建的字段alter table bigdata_professor add column name varchar(6); 再次查看表中字段： 再次运行django服务器，后台添加name字段时就不会出错了。 解决方案2：先删除整个migrations文件夹，再Python manage.py makemigrations,再python manage.py migrate 这样表就可以重新建立成功了！（可以查询到django中新建的表bigdata_professor….） Note: 成功后最好把之前删除的文件夹migrations重新建一个（app中的） 只删除migration文件可能不会出现这个问题：No migrations to apply. Your models have changes that are not yet reflected in a migration, and so won’t be applied. Run ‘manage.py makemigrations’ to make new migrations, and then re-run ‘manage.py migrate’ to apply them. 我了个去，都不知道为啥migration文件会出问题，删除后再操作就没事了，可能是（在makemigrations）之前先进行了migrate操作？[Django Models (1054, “Unknown column in ‘field list’”)] 问题：表不存在或者No migrations to apply “Table ‘lab_data.bigdata_resdir’ doesn’t exist” 模型中建立新表后，makemigrations成功，但是migrate出现错误: python manage.py migrateOperations to …:Apply all migrations: …No migrations to apply.(即使实际上明明makemigrations成功，并且有许多migrations可以应用) Your models have changes that are not yet reflected in a migration, and so won’t be applied. Run ‘manage.py makemigrations’ to make new migrations, and then re-run ‘manage.py migrate’ to apply them. 按照提示重新makemigration后migration文件就不会创建新表了，在数据库中表也的确没有新建。原因： Sounds like your initial migration was faked because the table already existed (probably with an outdated schema): “This will make a new initial migration for your app. Now, when you run migrate,Django will detect that you have an initial migration and that the tables it wants to create already exist, and will mark the migration as already applied.”Otherwise you would get an no-such-table error.[No migrations to apply, even though there are migrations to apply] 也可能是之前按照某个说明执行了一次python manage.py migrate –fake导致的。–fake 的含义是不执行该迁移脚本但是标记该脚本已经被执行过。导致之后无法正常进行迁移。[Django 1.7 中 migrate 无法执行而且表不存在的解决方案]解决方案：方法1. In MySQL Database delete row ‘app_name’ from the table ‘django_migrations’.打开mysql command line client, 进入创建好的数据库use databasename; 查看表select * from django_migration; 发现将要执行的迁移脚本的 id 已经添加在表中了，将其删除即可，即删除最新一次app_name对就的id行。 Delete all migration files in migrations folder. Try again python manage.py makemigrations and python manage.py migrate command.[Django 1.7 - “No migrations to apply” when run migrate after makemigrations]方法2：移除整个migrations文件夹，重新makemigrations和migrate。之后就会自动创建了： 方法3：实在不行，只能drop database，再重新建立了。 问题：外键修改成多对多错误ValueError: Cannot alter field bigdata.Postgraduate.publisher into bigdata.Postgraduate.publisher - they are not compatible types (you cannot alter to or from M2M fields, or add or remove through= on M2M fields) {这个错误是由将模型Postgraduate中的publisher字段从ForeignKey修改成ManyToManyField引起的}解决方案：删除所有migrations文件，重新makemigrations和migrate[foreignkey error: Django migration error :you cannot alter to or from M2M fields, or add or remove through= on M2M fields] 数据库注册到site管理错误TypeError: init() missing 2 required positional arguments : ‘model’ and ‘admin_site’ class DirectionsInline(inlineBase, admin.ModelAdmin): model = Directions inlines = [ImagesInline, ]admin.site.register(Directions, DirectionsInline) 解决：原因可能是继承admin.ModelAdmin的类中不能有model = * 数据库权限错误django.db.utils.operationalerror:&lt;1045,”access denied for user root@localhost using password yes&gt;解决方案1：django setting.py文件中设置的database用户名或者密码错了，修改一下就可以了或者是django运行项目时用的不是settings.py文件，这个在os.environ.setdefault(“DJANGO_SETTINGS_MODULE”, “labsite.settings”)中设置 其它方案：Access denied for user ‘root’@’localhost’ (using password: YES) mysql Access denied for user root@localhost错误解决方法总结(转)ERROR 1045 (28000): Access denied for user ‘root’@’localhost’ (using password: NO)MySQL Forums ::Install &amp; Repo ::ERROR 1045 (28000): Access denied for user ‘root’@’localhost’ (using password: NO)django.db.utils.operationalerror:&lt;2003, “can’t connect to mysql server on ‘127.0.0.1’(winerror 10061] No connection could be made because the target machine actively refused it)”)settings.py中设置的host和port如下‘HOST’: ‘127.0.0.1’,’PORT’: ‘3306’ 如改动port为其它，可能导致该问题其它问题：1.Error: Tablespace for table xxx exists. Please DISCARD the tablespace before IMPORT django.db.utils.ProgrammingError: (1146, “Table ‘lab_data.django_migrations’ doesn’t exist”)3.django.db.utils.InternalError: (1050, “Table ‘l ab_data.django_migrations‘already exists”) 1&gt;两个模型的数据库表名设置成一样的了class Meta: db_table = ‘WorkExp1’2&gt;python manage.py migrate –fakequestion:django.db.utils.InternalError: (1050, “Table ‘s_user_address’ already exists”) answer:./manage.py migrate myapp –fake 指定app 跳转//(py3_django) python@ubuntu:~/project/dailyfresh$ python manage.py migrate –fake –fakeOperations to perform: Synchronize unmigrated apps: staticfiles, messages, haystack, tinymce Apply all migrations: admin, df_cart, df_goods, djcelery, sessions, userinfo, auth, contenttypesSynchronizing apps without migrations: Creating tables… Running deferred SQL… Installing custom SQL…Running migrations: Rendering model states… DONE Applying userinfo.0001_initial… FAKED Applying df_goods.0001_initial… FAKED Applying df_cart.0001_initial… FAKED Applying djcelery.0001_initial… FAKED Applying djcelery.0002_auto_20170825_1331… FAKED Applying djcelery.0003_auto_20170827_0832… FAKED Applying djcelery.0004_auto_20170827_1256… FAKED Applying djcelery.0005_auto_20170828_0819… FAKED Applying djcelery.0006_auto_20170828_0826… FAKED Applying djcelery.0007_auto_20170828_1725… FAKED Applying djcelery.0008_auto_20170831_0830… FAKED Applying djcelery.0009_auto_20170831_1510… FAKED Applying djcelery.0010_auto_20170831_1514… FAKED Applying djcelery.0011_auto_20170831_1526… FAKED Applying djcelery.0012_auto_20170831_1532… FAKED Applying djcelery.0013_auto_20170831_1539… FAKED Applying djcelery.0014_auto_20170831_1552… FAKED Applying djcelery.0015_auto_20170831_1608… FAKED(py3_django) python@ubuntu:~/project/dailyfresh$ python manage.py migrate Operations to perform: Synchronize unmigrated apps: tinymce, haystack, messages, staticfiles Apply all migrations: djcelery, auth, userinfo, admin, contenttypes, df_cart, sessions, df_goodsSynchronizing apps without migrations: Creating tables… Running deferred SQL… Installing custom SQL…Running migrations: No migrations to apply. Your models have changes that are not yet reflected in a migration, and so won’t be applied. Run ‘manage.py makemigrations’ to make new migrations, and then re-run ‘manage.py migrate’ to apply them. (py3_django) python@ubuntu:~/project/dailyfresh$ python manage.py migrateOperations to perform: Synchronize unmigrated apps: messages, staticfiles, tinymce, haystack Apply all migrations: djcelery, df_goods, admin, df_cart, contenttypes, sessions, userinfo, authSynchronizing apps without migrations: Creating tables… Running deferred SQL… Installing custom SQL…Running migrations: Rendering model states… DONE Applying df_cart.0001_initial… OK(py3_django) python@ubuntu:~/project/dailyfresh$","categories":[{"name":"django","slug":"django","permalink":"http://smartfice.com/categories/django/"}],"tags":[{"name":"django","slug":"django","permalink":"http://smartfice.com/tags/django/"},{"name":"mysql","slug":"mysql","permalink":"http://smartfice.com/tags/mysql/"}]},{"title":"Django middleware","slug":"middleware","date":"2017-10-08T09:18:52.455Z","updated":"2017-10-08T09:18:52.451Z","comments":true,"path":"middleware/","link":"","permalink":"http://smartfice.com/middleware/","excerpt":"","text":"Django中间件是一个轻量级、底层的插件系统，可以介入Django的请求和响应处理过程，修改Django的输入或输出。中间件为设计开发者提供了一种无侵入式的开发方式。在middleware.py文件中定义中间件类： init(self) :服务器响应第一个请求的时候调用。 process_request(self, request)(每个请求上调用,返回None或者HttpResponse对象)：是产生request对象,进行url匹配之前调用 process_view(self, request, view_func, view_args, *view_kwargs)（每个请求上调用,返回None或者HttpResponse对象 ）:是url匹配之后,调用视图函数之前. process_response(self, request, response)（每个请求上调用,返回HttpResponse对象 ）:视图函数调用之后，内容返回给浏览器之前。 process_exception(self, request, exception)（每个请求上调用,返回HttpResponse对象 ）:视图函数出现异常，会调用这个函数如果多个中间件类包含process_exception函数的时候，调用的顺序跟注册的顺序是相反的 注册中间件类：settings.py MIDDLEWARE_CLASSES = [ ]比如我们要做一个 拦截器，发生有恶意访问网站的人，就拦截他！Django中间件实现拦截器 JavaWeb Struts2的拦截器我们都能很熟悉，在请求交给Action处理之前，先在拦截器中处理，处理完之后再交给Action。在Django中如何实现相同的效果? 在process_request方法中，返回值为HttpResponse类型的对象的时候不交给普通的控制器处理，直接返回给浏览器，返回值为None的时候，请求处理完之后交给普通的控制器处理。 使用request对象的META属性：request.META[‘REMOTE_ADDR’] 获取访问者的ip 假如我们通过一种技术，比如统计一分钟访问页面数，太多就把他的 IP 加入到黑名单 BLOCKED_IPS（这部分没有提供代码，主要讲中间件部分）项目 文件名 zscf 1234class BlockedIpMiddleware(object): def process_request(self, request): if request.META['REMOTE_ADDR'] in getattr(settings, \"BLOCKED_IPS\", []): return http.HttpResponseForbidden('&lt;h1&gt;Forbidden&lt;/h1&gt;') 这里的代码的功能就是 获取当前访问者的 IP (request.META[‘REMOTE_ADDR’])，如果这个 IP 在黑名单中就拦截，如果不在就返回 None (函数中没有返回值其实就是默认为 None)，把这个中间件的 Python 路径写到settings.py中 1234MIDDLEWARE_CLASSES = ( 'zscf.middleware.BlockedIpMiddleware', ...其它的中间件) Django 会从 MIDDLEWARE_CLASSES 中按照从上到下的顺序一个个执行中间件中的 process_request 函数，而其中 process_response 函数则是最前面的最后执行。 再比如，我们在网站放到服务器上正式运行后，DEBUG改为了 False，这样更安全，但是有时候发生错误不能显示错误详情页面，有没有办法处理好这两个事情呢？ 普通访问者看到的是友好的报错信息 管理员看到的是错误详情，以便于修复 BUG 当然可以有，利用中间件就可以做到！代码如下：12345678import sysfrom django.views.debug import technical_500_responsefrom django.conf import settings class UserBasedExceptionMiddleware(object): def process_exception(self, request, exception): if request.user.is_superuser or request.META.get('REMOTE_ADDR') in settings.INTERNAL_IPS: return technical_500_response(request, *sys.exc_info()) 把这个中间件像上面一样，加到你的 settings.py 中的 MIDDLEWARE_CLASSES 中，可以放到最后，这样可以看到其它中间件的 process_request的错误。","categories":[{"name":"django","slug":"django","permalink":"http://smartfice.com/categories/django/"}],"tags":[{"name":"django","slug":"django","permalink":"http://smartfice.com/tags/django/"},{"name":"python","slug":"python","permalink":"http://smartfice.com/tags/python/"}]},{"title":"python","slug":"python","date":"2017-09-28T12:29:10.000Z","updated":"2017-09-28T12:38:19.249Z","comments":true,"path":"python/","link":"","permalink":"http://smartfice.com/python/","excerpt":"","text":"欢迎来到我的技术","categories":[],"tags":[]}]}