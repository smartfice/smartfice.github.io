<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Monkey&#39;blog</title>
    <link>http://smartfice.com/</link>
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>Python Django Scrapy jQuery</description>
    <pubDate>Thu, 05 Oct 2017 13:58:38 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>images</title>
      <link>http://smartfice.com/images/index/</link>
      <guid>http://smartfice.com/images/index/</guid>
      <pubDate>Thu, 05 Oct 2017 13:58:38 GMT</pubDate>
      <description>
      
      </description>
      
      <comments>http://smartfice.com/images/index/#disqus_thread</comments>
    </item>
    
    <item>
      <title>django mysql数据库错误相关问题</title>
      <link>http://smartfice.com/mysql/</link>
      <guid>http://smartfice.com/mysql/</guid>
      <pubDate>Wed, 09 Aug 2017 14:18:15 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;&lt;img src=&quot;/mysql/imsges/banner.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;1、当我把-DEBUG-True设为False的时候运行-Python-manage-py-runserver-的时候&quot;&gt;&lt;a href=&quot;#1、当我把-DEBU
        
      
      </description>
      
      <content:encoded><![CDATA[<p><img src="/mysql/imsges/banner.jpg" alt=""></p><h2 id="1、当我把-DEBUG-True设为False的时候运行-Python-manage-py-runserver-的时候"><a href="#1、当我把-DEBUG-True设为False的时候运行-Python-manage-py-runserver-的时候" class="headerlink" title="1、当我把 DEBUG = True设为False的时候运行 Python manage.py runserver 的时候"></a>1、当我把 DEBUG = True设为False的时候运行 Python manage.py runserver 的时候</h2><p>报错 ： CommandError: You must set settings.ALLOWED_HOSTS if DEBUG is False.<br>解决方案：<br>ALLOWED_HOSTS = [‘127.0.0.1’, ‘localhost’]</p><h2 id="2、报错信息："><a href="#2、报错信息：" class="headerlink" title="2、报错信息："></a>2、报错信息：</h2><p> ModelForm Creating a ModelForm without either the ‘fields’ attribute or the ‘exclude’ attribute<br>is prohibited; form AuthorForm needs updating. </p><h3 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h3><p>class AuthorForm(ModelForm):<br>class Meta:<br>model = Author<br>fields = “all” </p><h2 id="3、报错信息：-CSRF-token-missing-or-incorrect"><a href="#3、报错信息：-CSRF-token-missing-or-incorrect" class="headerlink" title="3、报错信息： CSRF token missing or incorrect"></a>3、报错信息： CSRF token missing or incorrect</h2><h3 id="解决方案：-1"><a href="#解决方案：-1" class="headerlink" title="解决方案："></a>解决方案：</h3><h3 id="第一种方法："><a href="#第一种方法：" class="headerlink" title="第一种方法："></a>第一种方法：</h3><ul><li>第一步、 在 templete 中, 为每个 POST form 增加一个 {<br><strong>csrf_token</strong></li><li>第二步、在 view 中, 使用 django.template.RequestContext 而不是 Context.<br>render_to_response, 默认使用 Context. 需要改成 RequestContext.<br>return render_to_response(‘systemofdingh/modify.html’, {‘form’: orderModelForm(instance=orderModify)},<br>context_instance=RequestContext(request))<h4 id="第二中方法："><a href="#第二中方法：" class="headerlink" title="第二中方法："></a>第二中方法：</h4></li></ul><ol><li><p>settings.py 中 MIDDLEWARE_CLASSES 中 注释掉’django.middleware.csrf.CsrfViewMiddleware’</p></li><li><p>在你的views.py 的方法上加上 @csrf_exempt 装饰 (需要 from django.views.decorators.csrf import csrf_exempt)</p></li></ol><ul><li>You are trying to add a non-nullable field ‘orderID’ to ordermodel without a default; <pre><code>we can&apos;t do that (the database needs something to populate existing rows).</code></pre>Please select a fix: </li><li>Provide a one-off default now (will be set on all existing rows) </li><li>Quit, and let me add a default in models.py <h3 id="解决方案-删除migrate文件，然后重新来"><a href="#解决方案-删除migrate文件，然后重新来" class="headerlink" title="解决方案: 删除migrate文件，然后重新来"></a>解决方案: 删除migrate文件，然后重新来</h3>Django :<br>queryset的长度查询： len(queryset)<br>model对象转换成dict : model_to_dict<h2 id="问题：字段修改属性发生错误"><a href="#问题：字段修改属性发生错误" class="headerlink" title="问题：字段修改属性发生错误"></a>问题：字段修改属性发生错误</h2>1&gt;<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&gt;python manage.py makemigrationsYou are trying to add a non-nullable field <span class="string">'price_monthly'</span> to product without a default; we can<span class="string">'t do that (the database needs something to populate existing rows).</span></div><div class="line"><span class="string">Please select a fix:</span></div><div class="line"><span class="string"> 1) Provide a one-off default now (will be set on all existing rows)</span></div><div class="line"><span class="string"> 2) Quit, and let me add a default in models.py</span></div><div class="line"><span class="string">Select an option:</span></div></pre></td></tr></table></figure></li></ul><ol><li>{这个可能是之前已创建了表中的一条记录，之后模型中增加了一个非空的字段，但是原来已经存在的记录没有这个值}<br>2&gt;<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt;python manage.py migrate</div><div class="line"><span class="meta">... </span>...</div><div class="line"><span class="keyword">raise</span> errorclass(errno, errorvalue)django.db.utils.ProgrammingError: (<span class="number">1146</span>, <span class="string">"Table 'lab_data.bigdata_postgraduate_research_directions' doesn't exist"</span>)</div></pre></td></tr></table></figure></li></ol><ul><li><p>{这个是因为在字段中添加了blank=True或者 null=True引起的}<br>3&gt;</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&gt;python manage.py makemigrations</div><div class="line">You are trying to change the nullable field <span class="string">'job_title'</span> on professor to non-nullable without a default; we can<span class="string">'t do that (the database needs something to populate existing rows).</span></div><div class="line"><span class="string">Please select a fix:</span></div><div class="line"><span class="string"> 1) Provide a one-off default now (will be set on all existing rows)</span></div><div class="line"><span class="string"> 2) Ignore for now, and let me handle existing rows with NULL myself (e.g. adding a RunPython or RunSQL operation in the new migration file before the AlterField operation)</span></div><div class="line"><span class="string"> 3) Quit, and let me add a default in models.py</span></div><div class="line"><span class="string">Select an option:</span></div></pre></td></tr></table></figure></li><li><p>{这个是将模型中的null=True删除了之后产生的错误}<br>1&gt;原因解释：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">1. The migrations system is designed so that a single migration can be applied to more than one database. For example, you could have a development version, a staging version, and one or more production versions. That&apos;s whymaking the migration is a distinct step from applying the migration, and whymakemgirations can&apos;t just look at the currently active database to see that it doesn&apos;t have any rows. What if you then try to apply the migration to a database that does?</div><div class="line">The solution in your case is simple: since there are no rows, option 1 (setting a default on all existing rows) won&apos;t do anything at all. So choose option 1, and any value you like.</div><div class="line">[Django 1.7.1 requires a Default value for field - but no entry is in database. Why?]</div><div class="line">2. Django adds a default &quot;id&quot; field to every model, you don&apos;t need an extra &quot;twitbot_id&quot; in your model. If a surrogate primary key is all you need, forget about &quot;twitbot_id&quot; because it will be a duplicate of the auto-generated &quot;id&quot;. Seehttps://docs.djangoproject.com/en/dev/topics/db/models/#automatic-primary-key-fields</div><div class="line">If you add this and you already have TwitterBot objects in your database you must provide a default value to populate this column for existing rows in the database.</div><div class="line">[Can&apos;t seem to lose this error: “You are trying to add a non-nullable field”]</div></pre></td></tr></table></figure></li><li><p>如果你跟我一样是因为之前建好表a后，又创建一个表b作为a的父类，a中只有pass，那么因为表a已经创建，其中有数据，当a迁移时就会出现新表不能为null且没有指定默认值时就会出现这种错误。</p><h3 id="解决方案：-2"><a href="#解决方案：-2" class="headerlink" title="解决方案："></a>解决方案：</h3><h4 id="1-gt-在基类b中添加允许为空或者添加默认值，并设置b不建表（meta中的abstract-true）"><a href="#1-gt-在基类b中添加允许为空或者添加默认值，并设置b不建表（meta中的abstract-true）" class="headerlink" title="1&gt;在基类b中添加允许为空或者添加默认值，并设置b不建表（meta中的abstract = true）"></a>1&gt;在基类b中添加允许为空或者添加默认值，并设置b不建表（meta中的abstract = true）</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span><span class="params">(models.Model)</span>:</span></div><div class="line">    <span class="string">'''</span></div><div class="line"><span class="string">    基类</span></div><div class="line"><span class="string">    '''</span>    title = models.CharField(max_length=<span class="number">150</span>, null=<span class="keyword">True</span>)</div><div class="line">    content = models.TextField(null=<span class="keyword">True</span>)</div><div class="line">    time_stamp = models.DateTimeField(auto_now_add=<span class="keyword">True</span>, default=timezone.now())</div><div class="line">    link = models.URLField(blank=<span class="keyword">True</span>, verbose_name=<span class="string">'url_link'</span>)</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></div><div class="line">        abstract = <span class="keyword">True</span></div></pre></td></tr></table></figure></li></ul><p>Note:DataTimeField好像与其它的不一样，不好改！<br>1&gt;2&gt;3&gt;<br>删除所有migrate文件(不用移除整个文件夹)，然后重来</p><h2 id="问题：manytomanyfeild没有默认值"><a href="#问题：manytomanyfeild没有默认值" class="headerlink" title="问题：manytomanyfeild没有默认值"></a>问题：manytomanyfeild没有默认值</h2><p>django admin gives warning “Field ‘X’ doesn’t have a default value”</p><h3 id="问题：添加元属性发生错误"><a href="#问题：添加元属性发生错误" class="headerlink" title="问题：添加元属性发生错误"></a>问题：添加元属性发生错误</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">raise</span> InternalError(errno, errorvalue)</div><div class="line">django.db.utils.InternalError: (<span class="number">1017</span>, <span class="string">"Can't find file: '.\\lab_data\\people_patent_prizes.frm' (errno: 2 -No such file or directory)"</span>)</div></pre></td></tr></table></figure><p>{模型类中增加class Meta:db_table=’People’使数据库中对应的表名修改成了People，原来的表间联系可能破坏了}<br>解决方案：<br>删除所有migrate文件(不用移除整个文件夹)，然后重来</p><h3 id="问题：表中字段不存在"><a href="#问题：表中字段不存在" class="headerlink" title="问题：表中字段不存在"></a>问题：表中字段不存在</h3><p>“Unknown column ‘name’ in ‘field list’”</p><p>django中创建了表professor继承了表people的字段，并且在后台可以看到，但实际在数据库中不存在（数据库中查询可看到）</p><h4 id="出现问题原因："><a href="#出现问题原因：" class="headerlink" title="出现问题原因："></a>出现问题原因：</h4><ul><li>model中编辑的字段没有在数据库对应的表里创建（原因可能是字段是继承自父类，出现的什么问题？）</li></ul><p>数据库中查看表中的字段：</p><ul><li>migration文件出了什么问题？导致没有同步到数据库（表都没创建）<br>解决方案1：<br>在数据库中手动添加没有创建的字段<br>alter table bigdata_professor add column name varchar(6);</li></ul><p>再次查看表中字段：</p><p>再次运行django服务器，后台添加name字段时就不会出错了。</p><h3 id="解决方案2："><a href="#解决方案2：" class="headerlink" title="解决方案2："></a>解决方案2：</h3><p>先删除整个migrations文件夹，再Python manage.py makemigrations,再python manage.py migrate</p><p>这样表就可以重新建立成功了！（可以查询到django中新建的表bigdata_professor….）</p><p>Note:</p><ol><li>成功后最好把之前删除的文件夹migrations重新建一个（app中的）</li><li>只删除migration文件可能不会出现这个问题：<br>No migrations to apply.   Your models have changes that are not yet reflected in a migration, and so won’t be applied. Run ‘manage.py makemigrations’ to make new migrations, and then re-run ‘manage.py migrate’ to apply them.</li></ol><p>我了个去，都不知道为啥migration文件会出问题，删除后再操作就没事了，可能是（在makemigrations）之前先进行了migrate操作？<br>[Django Models (1054, “Unknown column in ‘field list’”)]</p><h2 id="问题：表不存在或者No-migrations-to-apply"><a href="#问题：表不存在或者No-migrations-to-apply" class="headerlink" title="问题：表不存在或者No migrations to apply"></a>问题：表不存在或者No migrations to apply</h2><p> “Table ‘lab_data.bigdata_resdir’ doesn’t exist”</p><p>模型中建立新表后，makemigrations成功，但是migrate出现错误:</p><p>python manage.py migrate<br>Operations to …:<br>Apply all migrations: …<br>No migrations to apply.(即使实际上明明makemigrations成功，并且有许多migrations可以应用)<br>  Your models have changes that are not yet reflected in a migration, and so won’t be applied.  Run ‘manage.py makemigrations’ to make new migrations, and then re-run ‘manage.py migrate’ to apply them.</p><p>按照提示重新makemigration后migration文件就不会创建新表了，在数据库中表也的确没有新建。<br>原因：</p><ol><li>Sounds like your initial migration was faked because the table already existed (probably with an outdated schema):</li></ol><p>“This will make a new initial migration for your app. Now, when you run migrate,Django will detect that you have an initial migration and that the tables it wants to create already exist, and will mark the migration as already applied.”<br>Otherwise you would get an no-such-table error.[No migrations to apply, even though there are migrations to apply]</p><ol><li>也可能是之前按照某个说明执行了一次python manage.py migrate –fake导致的。–fake 的含义是不执行该迁移脚本但是标记该脚本已经被执行过。导致之后无法正常进行迁移。<h3 id="Django-1-7-中-migrate-无法执行而且表不存在的解决方案"><a href="#Django-1-7-中-migrate-无法执行而且表不存在的解决方案" class="headerlink" title="[Django 1.7 中 migrate 无法执行而且表不存在的解决方案]"></a>[Django 1.7 中 migrate 无法执行而且表不存在的解决方案]</h3><h3 id="解决方案：-3"><a href="#解决方案：-3" class="headerlink" title="解决方案："></a>解决方案：</h3><h4 id="方法1"><a href="#方法1" class="headerlink" title="方法1."></a>方法1.</h4></li></ol><ul><li>In MySQL Database delete row ‘app_name’ from the table ‘django_migrations’.<br>打开mysql command line client, 进入创建好的数据库use databasename; 查看表select * from django_migration; 发现将要执行的迁移脚本的 id 已经添加在表中了，将其删除即可，即删除最新一次app_name对就的id行。</li><li>Delete all migration files in migrations folder.</li><li>Try again python manage.py makemigrations and python manage.py migrate command.<br>[Django 1.7 - “No migrations to apply” when run migrate after makemigrations]<h4 id="方法2："><a href="#方法2：" class="headerlink" title="方法2："></a>方法2：</h4>移除整个migrations文件夹，重新makemigrations和migrate。之后就会自动创建了：</li></ul><h4 id="方法3："><a href="#方法3：" class="headerlink" title="方法3："></a>方法3：</h4><p>实在不行，只能drop database，再重新建立了。</p><h2 id="问题：外键修改成多对多错误"><a href="#问题：外键修改成多对多错误" class="headerlink" title="问题：外键修改成多对多错误"></a>问题：外键修改成多对多错误</h2><p>ValueError: Cannot alter field bigdata.Postgraduate.publisher into bigdata.Postgraduate.publisher - they are not compatible types (you cannot alter to or from M2M fields<br>, or add or remove through= on M2M fields)</p><p>{这个错误是由将模型Postgraduate中的publisher字段从ForeignKey修改成ManyToManyField引起的}<br>解决方案：<br>删除所有migrations文件，重新makemigrations和migrate<br>[foreignkey error: Django migration error :you cannot alter to or from M2M fields, or add or remove through= on M2M fields]</p><h2 id="数据库注册到site管理错误"><a href="#数据库注册到site管理错误" class="headerlink" title="数据库注册到site管理错误"></a>数据库注册到site管理错误</h2><p>TypeError: <strong>init</strong>() missing 2 required positional arguments : ‘model’ and ‘admin_site’</p><p>class DirectionsInline(inlineBase, admin.ModelAdmin):<br>    model = Directions<br>    inlines = [ImagesInline, ]<br>admin.site.register(Directions, DirectionsInline)</p><p>解决：原因可能是继承admin.ModelAdmin的类中不能有model = <em>*</em></p><h2 id="数据库权限错误"><a href="#数据库权限错误" class="headerlink" title="数据库权限错误"></a>数据库权限错误</h2><p>django.db.utils.operationalerror:&lt;1045,”access denied for user root@localhost using password yes&gt;<br>解决方案1：django setting.py文件中设置的database用户名或者密码错了，修改一下就可以了<br>或者是django运行项目时用的不是settings.py文件，这个在os.environ.setdefault(“DJANGO_SETTINGS_MODULE”, “labsite.settings”)中设置</p><h3 id="其它方案："><a href="#其它方案：" class="headerlink" title="其它方案："></a>其它方案：</h3><p>Access denied for user ‘root’@’localhost’ (using password: YES)</p><p>mysql Access denied for user root@localhost错误解决方法总结(转)<br>ERROR 1045 (28000): Access denied for user ‘root’@’localhost’ (using password: NO)<br>MySQL Forums ::Install &amp; Repo ::ERROR 1045 (28000): Access denied for user ‘root’@’localhost’ (using password: NO)<br>django.db.utils.operationalerror:&lt;2003, “can’t connect to mysql server on ‘127.0.0.1’(winerror 10061] No connection could be made because the target machine actively refused it)”)<br>settings.py中设置的host和port如下<br>‘HOST’: ‘127.0.0.1’,’PORT’: ‘3306’</p><p>如改动port为其它，可能导致该问题<br>其它问题：<br>1.Error: Tablespace for table xxx exists. Please DISCARD the tablespace before IMPORT</p><ol><li>django.db.utils.ProgrammingError: (1146, “Table ‘lab_data.django_migrations’ doesn’t exist”)<br>3.django.db.utils.InternalError: (1050, “Table ‘<code>l ab_data</code>.<code>django_migrations</code>‘already exists”)</li></ol><p>1&gt;两个模型的数据库表名设置成一样的了<br>class Meta:<br>    db_table = ‘WorkExp1’<br>2&gt;python manage.py migrate –fake<br>question:<br>django.db.utils.InternalError: (1050, “Table ‘s_user_address’ already exists”)</p><p>answer:<br>./manage.py migrate myapp –fake  指定app 跳转//<br>(py3_django) python@ubuntu:~/project/dailyfresh$ python manage.py migrate –fake</p><p>–fakeOperations to perform:<br>  Synchronize unmigrated apps: staticfiles, messages, haystack, tinymce<br>  Apply all migrations: admin, df_cart, df_goods, djcelery, sessions, userinfo, auth, contenttypes<br>Synchronizing apps without migrations:<br>  Creating tables…<br>    Running deferred SQL…<br>  Installing custom SQL…<br>Running migrations:<br>  Rendering model states… DONE<br>  Applying userinfo.0001_initial… FAKED<br>  Applying df_goods.0001_initial… FAKED<br>  Applying df_cart.0001_initial… FAKED<br>  Applying djcelery.0001_initial… FAKED<br>  Applying djcelery.0002_auto_20170825_1331… FAKED<br>  Applying djcelery.0003_auto_20170827_0832… FAKED<br>  Applying djcelery.0004_auto_20170827_1256… FAKED<br>  Applying djcelery.0005_auto_20170828_0819… FAKED<br>  Applying djcelery.0006_auto_20170828_0826… FAKED<br>  Applying djcelery.0007_auto_20170828_1725… FAKED<br>  Applying djcelery.0008_auto_20170831_0830… FAKED<br>  Applying djcelery.0009_auto_20170831_1510… FAKED<br>  Applying djcelery.0010_auto_20170831_1514… FAKED<br>  Applying djcelery.0011_auto_20170831_1526… FAKED<br>  Applying djcelery.0012_auto_20170831_1532… FAKED<br>  Applying djcelery.0013_auto_20170831_1539… FAKED<br>  Applying djcelery.0014_auto_20170831_1552… FAKED<br>  Applying djcelery.0015_auto_20170831_1608… FAKED<br>(py3_django) python@ubuntu:~/project/dailyfresh$ python manage.py migrate</p><p>Operations to perform:<br>  Synchronize unmigrated apps: tinymce, haystack, messages, staticfiles<br>  Apply all migrations: djcelery, auth, userinfo, admin, contenttypes, df_cart, sessions, df_goods<br>Synchronizing apps without migrations:<br>  Creating tables…<br>    Running deferred SQL…<br>  Installing custom SQL…<br>Running migrations:<br>  No migrations to apply.<br>  Your models have changes that are not yet reflected in a migration, and so won’t be applied.<br>  Run ‘manage.py makemigrations’ to make new migrations, and then re-run ‘manage.py migrate’ to apply them.</p><p>(py3_django) python@ubuntu:~/project/dailyfresh$ python manage.py migrate<br>Operations to perform:<br>  Synchronize unmigrated apps: messages, staticfiles, tinymce, haystack<br>  Apply all migrations: djcelery, df_goods, admin, df_cart, contenttypes, sessions, userinfo, auth<br>Synchronizing apps without migrations:<br>  Creating tables…<br>    Running deferred SQL…<br>  Installing custom SQL…<br>Running migrations:<br>  Rendering model states… DONE<br>  Applying df_cart.0001_initial… OK<br>(py3_django) python@ubuntu:~/project/dailyfresh$</p>]]></content:encoded>
      
      <comments>http://smartfice.com/mysql/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Django middleware</title>
      <link>http://smartfice.com/middleware/</link>
      <guid>http://smartfice.com/middleware/</guid>
      <pubDate>Tue, 13 Jun 2017 12:11:12 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;Django中间件是一个轻量级、底层的插件系统，可以介入Django的请求和响应处理过程，修改Django的输入或输出。中间件为设计开发者提供了一种无侵入式的开发方式。&quot;&gt;&lt;a href=&quot;#Django中间件是一个轻量级、底层的插件系统，可以介入Django的请
        
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="Django中间件是一个轻量级、底层的插件系统，可以介入Django的请求和响应处理过程，修改Django的输入或输出。中间件为设计开发者提供了一种无侵入式的开发方式。"><a href="#Django中间件是一个轻量级、底层的插件系统，可以介入Django的请求和响应处理过程，修改Django的输入或输出。中间件为设计开发者提供了一种无侵入式的开发方式。" class="headerlink" title="Django中间件是一个轻量级、底层的插件系统，可以介入Django的请求和响应处理过程，修改Django的输入或输出。中间件为设计开发者提供了一种无侵入式的开发方式。"></a>Django中间件是一个轻量级、底层的插件系统，可以介入Django的请求和响应处理过程，修改Django的输入或输出。中间件为设计开发者提供了一种无侵入式的开发方式。</h2><h3 id="在middleware-py文件中定义中间件类："><a href="#在middleware-py文件中定义中间件类：" class="headerlink" title="在middleware.py文件中定义中间件类："></a>在middleware.py文件中定义中间件类：</h3><ul><li><strong>init</strong>(self) :服务器响应第一个请求的时候调用。</li><li>process_request(self, request)(每个请求上调用,返回None或者HttpResponse对象)：是产生request对象,进行url匹配之前调用</li><li>process_view(self, request, view_func, <em>view_args, *</em>view_kwargs)（每个请求上调用,返回None或者HttpResponse对象 ）:是url匹配之后,调用视图函数之前.</li><li>process_response(self, request, response)（每个请求上调用,返回HttpResponse对象 ）:视图函数调用之后，内容返回给浏览器之前。</li><li>process_exception(self, request, exception)（每个请求上调用,返回HttpResponse对象 ）:视图函数出现异常，会调用这个函数如果多个中间件类包含process_exception函数的时候，调用的顺序跟注册的顺序是相反的</li></ul><h3 id="注册中间件类：settings-py-MIDDLEWARE-CLASSES"><a href="#注册中间件类：settings-py-MIDDLEWARE-CLASSES" class="headerlink" title="注册中间件类：settings.py MIDDLEWARE_CLASSES = [ ]"></a>注册中间件类：settings.py <em>MIDDLEWARE_CLASSES = [ ]</em></h3><h4 id="比如我们要做一个-拦截器，发生有恶意访问网站的人，就拦截他！Django中间件实现拦截器-JavaWeb-Struts2的拦截器我们都能很熟悉，在请求交给Action处理之前，先在拦截器中处理，处理完之后再交给Action。"><a href="#比如我们要做一个-拦截器，发生有恶意访问网站的人，就拦截他！Django中间件实现拦截器-JavaWeb-Struts2的拦截器我们都能很熟悉，在请求交给Action处理之前，先在拦截器中处理，处理完之后再交给Action。" class="headerlink" title="比如我们要做一个 拦截器，发生有恶意访问网站的人，就拦截他！Django中间件实现拦截器 JavaWeb Struts2的拦截器我们都能很熟悉，在请求交给Action处理之前，先在拦截器中处理，处理完之后再交给Action。"></a>比如我们要做一个 拦截器，发生有恶意访问网站的人，就拦截他！Django中间件实现拦截器 JavaWeb Struts2的拦截器我们都能很熟悉，在请求交给Action处理之前，先在拦截器中处理，处理完之后再交给Action。</h4><h3 id="在Django中如何实现相同的效果"><a href="#在Django中如何实现相同的效果" class="headerlink" title="在Django中如何实现相同的效果?"></a>在Django中如何实现相同的效果?</h3><ul><li>在process_request方法中，返回值为HttpResponse类型的对象的时候不交给普通的控制器处理，直接返回给浏览器，返回值为None的时候，请求处理完之后交给普通的控制器处理。</li><li>使用request对象的META属性：request.META[‘REMOTE_ADDR’]  获取访问者的ip</li><li><p>假如我们通过一种技术，比如统计一分钟访问页面数，太多就把他的 IP 加入到黑名单 BLOCKED_IPS（这部分没有提供代码，主要讲中间件部分）<br>项目 文件名 zscf</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">BlockedIpMiddleware</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_request</span><span class="params">(self, request)</span>:</span></div><div class="line">        <span class="keyword">if</span> request.META[<span class="string">'REMOTE_ADDR'</span>] <span class="keyword">in</span> getattr(settings, <span class="string">"BLOCKED_IPS"</span>, []):</div><div class="line">            <span class="keyword">return</span> http.HttpResponseForbidden(<span class="string">'&lt;h1&gt;Forbidden&lt;/h1&gt;'</span>)</div></pre></td></tr></table></figure></li><li><p>这里的代码的功能就是 获取当前访问者的 IP (request.META[‘REMOTE_ADDR’])，如果这个 IP 在黑名单中就拦截，如果不在就返回 None (函数中没有返回值其实就是默认为 None)，把这个中间件的 Python 路径写到settings.py中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">MIDDLEWARE_CLASSES = (</div><div class="line">    <span class="string">'zscf.middleware.BlockedIpMiddleware'</span>,</div><div class="line">    ...其它的中间件</div><div class="line">)</div></pre></td></tr></table></figure></li><li><p>Django 会从 MIDDLEWARE_CLASSES 中按照从上到下的顺序一个个执行中间件中的 process_request 函数，而其中 process_response 函数则是最前面的最后执行。</p><h3 id="再比如，我们在网站放到服务器上正式运行后，DEBUG改为了-False，这样更安全，但是有时候发生错误不能显示错误详情页面，有没有办法处理好这两个事情呢？"><a href="#再比如，我们在网站放到服务器上正式运行后，DEBUG改为了-False，这样更安全，但是有时候发生错误不能显示错误详情页面，有没有办法处理好这两个事情呢？" class="headerlink" title="再比如，我们在网站放到服务器上正式运行后，DEBUG改为了 False，这样更安全，但是有时候发生错误不能显示错误详情页面，有没有办法处理好这两个事情呢？"></a>再比如，我们在网站放到服务器上正式运行后，DEBUG改为了 False，这样更安全，但是有时候发生错误不能显示错误详情页面，有没有办法处理好这两个事情呢？</h3></li><li>普通访问者看到的是友好的报错信息</li><li><p>管理员看到的是错误详情，以便于修复 BUG</p><h4 id="当然可以有，利用中间件就可以做到！代码如下："><a href="#当然可以有，利用中间件就可以做到！代码如下：" class="headerlink" title="当然可以有，利用中间件就可以做到！代码如下："></a>当然可以有，利用中间件就可以做到！代码如下：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">from</span> django.views.debug <span class="keyword">import</span> technical_500_response</div><div class="line"><span class="keyword">from</span> django.conf <span class="keyword">import</span> settings</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserBasedExceptionMiddleware</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_exception</span><span class="params">(self, request, exception)</span>:</span></div><div class="line">        <span class="keyword">if</span> request.user.is_superuser <span class="keyword">or</span> request.META.get(<span class="string">'REMOTE_ADDR'</span>) <span class="keyword">in</span> settings.INTERNAL_IPS:</div><div class="line">            <span class="keyword">return</span> technical_500_response(request, *sys.exc_info())</div></pre></td></tr></table></figure></li><li><p>把这个中间件像上面一样，加到你的 settings.py 中的 MIDDLEWARE_CLASSES 中，可以放到最后，这样可以看到其它中间件的 process_request的错误。</p></li></ul>]]></content:encoded>
      
      <comments>http://smartfice.com/middleware/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Django权限机制</title>
      <link>http://smartfice.com/django1/</link>
      <guid>http://smartfice.com/django1/</guid>
      <pubDate>Fri, 26 May 2017 13:53:36 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;Django权限机制概述&quot;&gt;&lt;a href=&quot;#Django权限机制概述&quot; class=&quot;headerlink&quot; title=&quot;Django权限机制概述&quot;&gt;&lt;/a&gt;Django权限机制概述&lt;/h2&gt;&lt;p&gt;权限机制能够约束用户行为，控制页面的显示内容，也能使API更
        
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="Django权限机制概述"><a href="#Django权限机制概述" class="headerlink" title="Django权限机制概述"></a>Django权限机制概述</h2><p>权限机制能够约束用户行为，控制页面的显示内容，也能使API更加安全和灵活；用好权限机制，能让系统更加强大和健壮。因此，基于Django的开发，理清Django权限机制是非常必要的。</p><ul><li>Django的权限控制<br>Django用user, group和permission完成了权限机制，这个权限机制是将属于model的某个permission赋予user或group，可以理解为全局的权限，即如果用户A对数据模型（model）B有可写权限，那么A能修改model B的所有实例（objects）。group的权限也是如此，如果为group C 赋予model B的可写权限，则隶属于group C 的所有用户，都可以修改model B的所有实例。</li><li>这种权限机制只能解决一些简单的应用需求，而大部分应用场景下，需要更细分的权限机制。以博客系统为例，博客系统的用户可分为『管理员』、『编辑』、『作者』和『读者』四个用户组；博客系统管理员和编辑具有查看、修改和删除所有的文章的权限，作者只能修改和删除自己写的文章，而读者则只有阅读权限。管理员、编辑和读者的权限，我们可以用全局权限做控制，而对于作者，全局权限无法满足需求，仅通过全局权限，要么允许作者编辑不属于自己的文章，要么让作者连自己的文章都无法修改。</li><li>上述的应用场景，Django自带的权限机制无法满足需求，需要引入另一种更细的权限机制：对象权限（object permission）。</li><li>Object Permission是一种对象颗粒度上的权限机制，它允许为每个具体对象授权。仍沿用最开始的例子，如果model B有三个实例 B1，B2 和B3，如果我们把B1的可写权限赋予用户A，则A可以修改B1对象，而对B2，B3无法修改。对group也一样，如果将B2的可写权限赋予group C，则隶属于group C的所有用户均可以修改B2，但无法修改B1和B3。结合Django自带权限机制和object permission，博客系统中作者的权限控制迎刃而解：系统全局上不允许作者编辑文章，而对于属于作者的具体文章，赋予编辑权限即可。<br>Django其实包含了object permission的框架，但没有具体实现，object permission的实现需要借助第三方app django-guardian，我们在开发中用调用django guradian封装好的方法即可。</li></ul><h3 id="Django的权限项"><a href="#Django的权限项" class="headerlink" title="Django的权限项"></a>Django的权限项</h3><ul><li>Django用permission对象存储权限项，每个model默认都有三个permission，即add model, change model和delete model。例如，定义一个名为『Car』model，定义好Car之后，会自动创建相应的三个permission：add_car, change_car和delete_car。Django还允许自定义permission，例如，我们可以为Car创建新的权限项：drive_car, clean_car, fix_car等等</li><li>需要注意的是，permission总是与model对应的，如果一个object不是model的实例，我们无法为它创建/分配权限。</li></ul><h2 id="Django-自带权限机制的应用"><a href="#Django-自带权限机制的应用" class="headerlink" title="Django 自带权限机制的应用"></a>Django 自带权限机制的应用</h2><h3 id="Permission"><a href="#Permission" class="headerlink" title="Permission"></a>Permission</h3><ul><li><p>如上文所述，Django定义每个model后，默认都会添加该model的add, change和delete三个permission，自定义的permission可以在我们定义model时手动添加：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Task</span><span class="params">(models.Model)</span>:</span></div><div class="line">    ...</div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></div><div class="line">        permissions = (</div><div class="line">            (<span class="string">"view_task"</span>, <span class="string">"Can see available tasks"</span>),</div><div class="line">            (<span class="string">"change_task_status"</span>, <span class="string">"Can change the status of tasks"</span>),</div><div class="line">            (<span class="string">"close_task"</span>, <span class="string">"Can remove a task by setting its status as closed"</span>),</div><div class="line">        )</div></pre></td></tr></table></figure></li><li><p>每个permission都是django.contrib.auth.Permission类型的实例，该类型包含三个字段name, codename 和 content_type，其中 content_type反应了permission属于哪个model，codename如上面的view_task，代码逻辑中检查权限时要用， name是permission的描述，将permission打印到屏幕或页面时默认显示的就是name</p></li><li>在model中创建自定义权限，从系统开发的角度，可理解为创建系统的内置权限，如果需求中涉及到用户使用系统时创建自定义权限，则要通过下面方法：<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> myapp.models <span class="keyword">import</span> BlogPost</div><div class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> Permission</div><div class="line"><span class="keyword">from</span> django.contrib.contenttypes.models <span class="keyword">import</span> ContentType</div><div class="line"></div><div class="line">content_type = ContentType.objects.get_for_model(BlogPost)</div><div class="line">permission = Permission.objects.create(codename=<span class="string">'can_publish'</span>,</div><div class="line">                                       name=<span class="string">'Can Publish Posts'</span>,</div><div class="line">                                       content_type=content_type)</div></pre></td></tr></table></figure></li></ul><h3 id="User-Permission管理"><a href="#User-Permission管理" class="headerlink" title="User Permission管理"></a>User Permission管理</h3><ul><li><p>User对象的user_permission字段管理用户的权限：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">myuser.user_permissions = [permission_list]</div><div class="line">myuser.user_permissions.add(permission, permission, ...) <span class="comment">#增加权限</span></div><div class="line">myuser.user_permissions.remove(permission, permission, ...) <span class="comment">#删除权限</span></div><div class="line">myuser.user_permissions.clear() <span class="comment">#清空权限</span></div></pre></td></tr></table></figure></li><li><p>注：上面的permission为django.contrib.auth.Permission类型的实例<br>检查用户权限用has_perm()方法：<br>myuser.has_perm(‘myapp.fix_car’)</p></li><li>has_perm()方法的参数，即permission的codename，但传递参数时需要加上model 所属app的前缀，格式为<app label="">.<permission codename="">。<br>无论permission赋予user还是group，has_perm()方法均适用<br>附注：<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">user.get_all_permissions()方法列出用户的所有权限，返回值是permission name的list</div><div class="line">user.get_group_permissions()方法列出用户所属group的权限，返回值是permission name的list</div></pre></td></tr></table></figure></permission></app></li></ul><h3 id="Group-Permission管理group"><a href="#Group-Permission管理group" class="headerlink" title="Group Permission管理group"></a>Group Permission管理group</h3><p>permission管理逻辑与user permission管理一致，group中使用permissions字段做权限管理：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">group.permissions = [permission_list]</div><div class="line">group.permissions.add(permission, permission, ...)</div><div class="line">group.permissions.remove(permission, permission, ...)</div><div class="line">group.permissions.clear()</div><div class="line">权限检查：</div><div class="line">依然使用user.has_perm()方法。</div></pre></td></tr></table></figure></p><h3 id="permission-required-装饰器"><a href="#permission-required-装饰器" class="headerlink" title="permission_required 装饰器"></a>permission_required 装饰器</h3><ul><li>权限能约束用户行为，当业务逻辑中涉及到权限检查时，decorator能够分离权限验证和核心的业务逻辑，使代码更简洁，逻辑更清晰。permission的decorator为permission_required：<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> django.contrib.auth.decorators <span class="keyword">import</span> permission_required</div><div class="line"></div><div class="line"><span class="meta">@permission_required('car.drive_car')def my_view(request):</span></div><div class="line">    ...</div></pre></td></tr></table></figure></li></ul><h3 id="Template中的权限检查"><a href="#Template中的权限检查" class="headerlink" title="Template中的权限检查"></a>Template中的权限检查</h3><ul><li>Template中使用全局变量perms存储当前用户的所有权限，权限检查可以参考下面例子：<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&#123;% if perms.main.add_page %&#125;</div><div class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"dropdown"</span>&gt;</span></div><div class="line">              <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"dropdown-toggle"</span> <span class="attr">data-toggle</span>=<span class="string">"dropdown"</span> <span class="attr">role</span>=<span class="string">"button"</span> <span class="attr">aria-expanded</span>=<span class="string">"false"</span>&gt;</span>Pages <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"caret"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">              <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"dropdown-menu"</span> <span class="attr">role</span>=<span class="string">"menu"</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;% url 'main:admin_pages' %&#125;"</span>&gt;</span>All Pages<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;% url 'main:admin_page' %&#125;"</span>&gt;</span>New Page<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;% url 'main:admin_pages' %&#125;?draft=true"</span>&gt;</span>Drafts<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">              <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">&#123;% endif %&#125;</div></pre></td></tr></table></figure></li></ul><h2 id="基于Django-guardian的object-permission的应用"><a href="#基于Django-guardian的object-permission的应用" class="headerlink" title="基于Django-guardian的object permission的应用"></a>基于Django-guardian的object permission的应用</h2><ul><li>Django-guardian基于django的原生逻辑扩展了django的权限机制，应用django-guardian后，可以使用django-guardian提供的方法以及django的原生方法检查全局权限，django-guardian提供的object permission机制使django的权限机制更加完善。</li><li>django-guardian详细的使用文档请参考官方文档，其object permission常用方法如下：<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> guardian.shortcuts <span class="keyword">import</span> assign_perm, get_perms</div><div class="line"><span class="keyword">from</span> guardian.core <span class="keyword">import</span> ObjectPermissionChecker</div><div class="line"><span class="keyword">from</span> guardian.decorators <span class="keyword">import</span> permission_required</div></pre></td></tr></table></figure></li></ul><h3 id="添加object-permission添加object-permission使用assign-perm-方法，如为用户添加对mycar对象的drive-car权限："><a href="#添加object-permission添加object-permission使用assign-perm-方法，如为用户添加对mycar对象的drive-car权限：" class="headerlink" title="添加object permission添加object permission使用assign_perm()方法，如为用户添加对mycar对象的drive_car权限："></a>添加object permission添加object permission使用assign_perm()方法，如为用户添加对mycar对象的drive_car权限：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">assign_perm(&apos;myapp.drive_car&apos;, request.user, mycar)</div><div class="line">assign_perm()方法也可用于group</div><div class="line">assign_perm(&apos;myapp.drive_car&apos;, mygroup, mycar)</div></pre></td></tr></table></figure><h3 id="权限检查3-2-1-Global-permissionget-perms-方法用于检查用户的“全局权限”（global-permission），与user-has-perm-异曲同工，如："><a href="#权限检查3-2-1-Global-permissionget-perms-方法用于检查用户的“全局权限”（global-permission），与user-has-perm-异曲同工，如：" class="headerlink" title="权限检查3.2.1 Global permissionget_perms()方法用于检查用户的“全局权限”（global permission），与user.has_perm()异曲同工，如："></a>权限检查3.2.1 Global permissionget_perms()方法用于检查用户的“全局权限”（global permission），与user.has_perm()异曲同工，如：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> <span class="keyword">not</span> <span class="string">'main.change_post'</span> <span class="keyword">in</span> get_perms(request.user, post):</div><div class="line">     <span class="keyword">raise</span> HttpResponse(<span class="string">'Forbidden'</span>)</div><div class="line"><span class="keyword">if</span> <span class="keyword">not</span> request.user.has_perm(<span class="string">'main.change_post'</span>)</div><div class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">'Forbidden'</span>)</div></pre></td></tr></table></figure><p>例子中虽然把post object作为参数传给get_perms()方法，但它只检查user的全局权限中是否有main.change_post权限，很多情况下可用原生的user.has_perm取代，但user和group均可作为get_perms()的传入参数，某些情况下可以使代码更简洁。</p><h3 id="Object-permissionDjango-guardian中使用"><a href="#Object-permissionDjango-guardian中使用" class="headerlink" title="Object permissionDjango-guardian中使用*"></a>Object permissionDjango-guardian中使用*</h3><ul><li>ObjectPermissionChecker检查用户的object permission，示例如下：<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">checker = ObjectPermissionChecker(request.user)</div><div class="line"><span class="keyword">print</span> checker.has_perm(<span class="string">'main.change_post'</span>, post)</div></pre></td></tr></table></figure></li></ul><h2 id="permission-required装饰器"><a href="#permission-required装饰器" class="headerlink" title="permission_required装饰器"></a>permission_required装饰器</h2><ul><li><p>guardian.decorators.permission_required是django-guardian权限检查的decorator，既可以检查全局权限，又可以检查对象权限（object permission），其中，accept_global_perms参数指出是否检查user的global permission，如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> guardian.decorators <span class="keyword">import</span> permission_required</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">DeletePost</span><span class="params">(View)</span>:</span>    @method_decorator(permission_required(<span class="string">'main.delete_post'</span>, </div><div class="line">                            (models.Post, <span class="string">'id'</span>, <span class="string">'pk'</span>), </div><div class="line">                            accept_global_perms=<span class="keyword">True</span>))</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request, pk)</span>:</span></div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            pk = int(pk)</div><div class="line">            cur_post = models.Post.objects.get(pk=pk)</div><div class="line">            is_draft = cur_post.is_draft</div><div class="line"></div><div class="line">            url = reverse(<span class="string">'main:admin_posts'</span>)</div><div class="line">            <span class="keyword">if</span> is_draft:</div><div class="line">                url = <span class="string">'&#123;0&#125;?draft=true'</span>.format(url)    </div><div class="line">            cur_post.delete()</div><div class="line">        <span class="keyword">except</span> models.Post.DoesNotExist:</div><div class="line">            <span class="keyword">raise</span> Http404</div><div class="line"></div><div class="line">        <span class="keyword">return</span> redirect(url)</div></pre></td></tr></table></figure></li><li><p>注：decorator中的(models.Post, ‘id’, ‘pk’)部分，用于指定object实例，如果忽略这个参数，则不论accept_global_perms值为True还是False，均仅仅检查全局权限。</p></li><li>结论Django原生提供了一种简单的全局权限（global permission）控制机制，但很多应用场景下，对象权限（object permission）更加有用；django-guardian是目前比较活跃的一个django extension，提供了一种有效的object permission控制机制，与django原生机制一脉相承。</li></ul>]]></content:encoded>
      
      <comments>http://smartfice.com/django1/#disqus_thread</comments>
    </item>
    
    <item>
      <title>python类的魔法方法、属性！！！</title>
      <link>http://smartfice.com/pythonmagic/</link>
      <guid>http://smartfice.com/pythonmagic/</guid>
      <pubDate>Tue, 28 Mar 2017 13:53:36 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;为了确保类是新型类，应该把-metaclass-type-入到你的模块的最开始。&quot;&gt;&lt;a href=&quot;#为了确保类是新型类，应该把-metaclass-type-入到你的模块的最开始。&quot; class=&quot;headerlink&quot; title=&quot;为了确保类是新型类，应该
        
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="为了确保类是新型类，应该把-metaclass-type-入到你的模块的最开始。"><a href="#为了确保类是新型类，应该把-metaclass-type-入到你的模块的最开始。" class="headerlink" title="为了确保类是新型类，应该把 metaclass=type 入到你的模块的最开始。"></a>为了确保类是新型类，应该把 <em>metaclass</em>=type 入到你的模块的最开始。</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">NewType</span><span class="params">(Object)</span>:</span></div><div class="line">　　mor_code_here</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">OldType</span>:</span></div><div class="line">　　mor_code_here</div></pre></td></tr></table></figure><h3 id="在这个两个类中NewType是新类，OldType是属于旧类，如果前面加上-metaclass-type-，那么两个类都属于新类。"><a href="#在这个两个类中NewType是新类，OldType是属于旧类，如果前面加上-metaclass-type-，那么两个类都属于新类。" class="headerlink" title="在这个两个类中NewType是新类，OldType是属于旧类，如果前面加上 metaclass=type ，那么两个类都属于新类。"></a>在这个两个类中NewType是新类，OldType是属于旧类，如果前面加上 <em>metaclass</em>=type ，那么两个类都属于新类。</h3><h2 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h2><h3 id="构造方法与其的方法不一样，当一个对象被创建会立即调用构造方法。创建一个python的构造方法很简答，只要把init方法，从简单的init方法，转换成魔法版本的init方法就可以了。"><a href="#构造方法与其的方法不一样，当一个对象被创建会立即调用构造方法。创建一个python的构造方法很简答，只要把init方法，从简单的init方法，转换成魔法版本的init方法就可以了。" class="headerlink" title="构造方法与其的方法不一样，当一个对象被创建会立即调用构造方法。创建一个python的构造方法很简答，只要把init方法，从简单的init方法，转换成魔法版本的init方法就可以了。"></a>构造方法与其的方法不一样，当一个对象被创建会立即调用构造方法。创建一个python的构造方法很简答，只要把init方法，从简单的init方法，转换成魔法版本的<em>init</em>方法就可以了。</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">FooBar</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        self.somevar = <span class="number">42</span></div><div class="line">        </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f =FooBar()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f.somevar</div><div class="line"><span class="number">42</span></div></pre></td></tr></table></figure><h3 id="重写一个一般方法"><a href="#重写一个一般方法" class="headerlink" title="重写一个一般方法"></a>重写一个一般方法</h3><ul><li><p>每一个类都可能拥有一个或多个超类（父类），它们从超类那里继承行为方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">'hello . I am A.'</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span><span class="params">(A)</span>:</span></div><div class="line">　　<span class="keyword">pass</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a = A()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>b = B()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a.hello()</div><div class="line">hello . I am A.</div></pre></td></tr></table></figure></li><li><p>因为B类没有hello方法，B类继承了A类，所以会调用A 类的hello方法。</p></li></ul><h3 id="在子类中增加功能功能的最基本的方式就是增加方法。但是也可以重写一些超类的方法来自定义继承的行为。如下："><a href="#在子类中增加功能功能的最基本的方式就是增加方法。但是也可以重写一些超类的方法来自定义继承的行为。如下：" class="headerlink" title="在子类中增加功能功能的最基本的方式就是增加方法。但是也可以重写一些超类的方法来自定义继承的行为。如下："></a>在子类中增加功能功能的最基本的方式就是增加方法。但是也可以重写一些超类的方法来自定义继承的行为。如下：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">'hello . I am A.'</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span><span class="params">(A)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">'hello . I am  B'</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>b = B()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>b.hello()</div><div class="line">hello . I am  B</div></pre></td></tr></table></figure><h3 id="特殊的和构造方法"><a href="#特殊的和构造方法" class="headerlink" title="特殊的和构造方法"></a>特殊的和构造方法</h3><ul><li><p>重写是继承机制中的一个重要内容，对一于构造方法尤其重要。看下面的例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bird</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        self.hungry = <span class="keyword">True</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">eat</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">if</span> self.hungry:</div><div class="line">            <span class="keyword">print</span> <span class="string">'Aaaah...'</span></div><div class="line">            self.hungry = <span class="keyword">False</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">print</span> <span class="string">'No, thanks!'</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>b = Bird()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>b.eat()</div><div class="line">Aaaah...</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>b.eat()</div><div class="line">No, thanks!</div></pre></td></tr></table></figure></li><li><p>这个类中定义了鸟有吃的能力， 当它吃过一次后再次就会不饿了，通过上面的执行结果可以清晰的看到。</p></li><li><p>那么用SongBird类来继承Bird 类，并且给它添加歌唱的方法：</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bird</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        self.hungry = <span class="keyword">True</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">eat</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">if</span> self.hungry:</div><div class="line">            <span class="keyword">print</span> <span class="string">'Aaaah...'</span></div><div class="line">            self.hungry = <span class="keyword">False</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">print</span> <span class="string">'No, thanks!'</span></div><div class="line">            </div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SongBird</span><span class="params">(Bird)</span>:</span></div><div class="line">         <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">                 self.sound = <span class="string">'Squawk!'</span></div><div class="line">         <span class="function"><span class="keyword">def</span> <span class="title">sing</span><span class="params">(self)</span>:</span></div><div class="line">                 <span class="keyword">print</span> self.sound</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s = SongBird()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s.sing()</div><div class="line">Squawk!</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s.eat()</div><div class="line"></div><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"&lt;pyshell#26&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">    s.eat()</div><div class="line">  File <span class="string">"C:/Python27/bird"</span>, line <span class="number">6</span>, <span class="keyword">in</span> eat</div><div class="line">    <span class="keyword">if</span> self.hungry:</div><div class="line">AttributeError: <span class="string">'SongBird'</span> object has no attribute <span class="string">'hungry'</span></div></pre></td></tr></table></figure><ul><li>异常很清楚地说明了错误：SongBird没有hungry特性。原因是这样的：在SongBird中，构造方法被重写，但新的构造方法没有任何关于初始化hungry特性的代码。为了达到预期的效果，SongBird的构造方法必须调用其超类Bird的构造方法来确保进行基本的初始化。</li></ul><h2 id="两种方法实现："><a href="#两种方法实现：" class="headerlink" title="两种方法实现："></a>两种方法实现：</h2><h3 id="一-、调用未绑定的超类构造方法"><a href="#一-、调用未绑定的超类构造方法" class="headerlink" title="一 、调用未绑定的超类构造方法"></a>一 、调用未绑定的超类构造方法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bird</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        self.hungry = <span class="keyword">True</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">eat</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">if</span> self.hungry:</div><div class="line">            <span class="keyword">print</span> <span class="string">'Aaaah...'</span></div><div class="line">            self.hungry = <span class="keyword">False</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">print</span> <span class="string">'No, thanks!'</span></div><div class="line">            </div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SongBird</span><span class="params">(Bird)</span>:</span></div><div class="line">         <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">                 Bird.__init__(self)</div><div class="line">                 self.sound = <span class="string">'Squawk!'</span></div><div class="line">         <span class="function"><span class="keyword">def</span> <span class="title">sing</span><span class="params">(self)</span>:</span></div><div class="line">                 <span class="keyword">print</span> self.sound</div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s = SongBird()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s.sing()</div><div class="line">Squawk!</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s.eat()</div><div class="line">Aaaah...</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s.eat()</div><div class="line">No, thanks!</div></pre></td></tr></table></figure><ul><li><p>在SongBird类中添加了一行代码Bird.<strong>init</strong>(self) 。 在调用一个实例的方法时，该方法的self参数会被自动绑定到实例上（这称为绑定方法）。但如果直接调用类的方法，那么就没有实例会被绑定。这样就可以自由地提供需要的self参数（这样的方法称为未绑定方法）。</p></li><li><p>通过将当前的实例作为self参数提供给未绑定方法，SongBird就能够使用其超类构造方法的所有实现，也就是说属性hungry能被设置。</p></li></ul><h3 id="二、使用super函数"><a href="#二、使用super函数" class="headerlink" title="二、使用super函数"></a>二、使用super函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">__metaclass__ = type  <span class="comment">#表明为新式类</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bird</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        self.hungry = <span class="keyword">True</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">eat</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">if</span> self.hungry:</div><div class="line">            <span class="keyword">print</span> <span class="string">'Aaaah...'</span></div><div class="line">            self.hungry = <span class="keyword">False</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">print</span> <span class="string">'No, thanks!'</span></div><div class="line">            </div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SongBird</span><span class="params">(Bird)</span>:</span></div><div class="line">         <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">                 super(SongBird,self).__init__()</div><div class="line">                 self.sound = <span class="string">'Squawk!'</span></div><div class="line">         <span class="function"><span class="keyword">def</span> <span class="title">sing</span><span class="params">(self)</span>:</span></div><div class="line">                 <span class="keyword">print</span> self.sound</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s.sing()</div><div class="line">Squawk!</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s.eat()</div><div class="line">Aaaah...</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s.eat()</div><div class="line">No, thanks!</div></pre></td></tr></table></figure><ul><li>super函数只能在新式类中使用。当前类和对象可以作为super函数的参数使用，调用函数返回的对象的任何方法都是调用超类的方法，而不是当前类的方法。那就可以不同在SongBird的构造方法中使用Bird,而直接使用super(SongBird,self)。</li></ul><h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><ul><li><p>访问器是一个简单的方法，它能够使用getHeight 、setHeight 之样的名字来得到或者重绑定一些特性。如果在访问给定的特性时必须要采取一些行动，那么像这样的封装状态变量就很重要。如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        self.width = <span class="number">0</span></div><div class="line">        self.height = <span class="number">0</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setSize</span><span class="params">(self,size)</span>:</span></div><div class="line">        self.width , self.height = size</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getSize</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.width , self.height</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>r = Rectangle()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>r.width = <span class="number">10</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>r.height = <span class="number">5</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>r.getSize()</div><div class="line">(<span class="number">10</span>, <span class="number">5</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>r.setSize((<span class="number">150</span>,<span class="number">100</span>))</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>r.width</div><div class="line"><span class="number">150</span></div></pre></td></tr></table></figure></li><li><p>在上面的例子中，getSize和setSize方法一个名为size的假想特性的访问器方法，size是由width 和height构成的元组。</p></li></ul><h2 id="property-函数"><a href="#property-函数" class="headerlink" title="property 函数"></a>property 函数</h2><ul><li><p>property函数的使用很简单，如果已经编写了一个像上节的Rectangle 那样的类，那么只要增加一行代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">__metaclass__ = type</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__int__</span><span class="params">(self)</span>:</span></div><div class="line">        self.width = <span class="number">0</span></div><div class="line">        self.height = <span class="number">0</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setSize</span><span class="params">(self,size)</span>:</span></div><div class="line">        self.width, self.height = size</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getSize</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.width ,self.height</div><div class="line">    size = property(getSize ,setSize)</div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>r = Rectangle()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>r.width = <span class="number">10</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>r.height = <span class="number">5</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>r.size</div><div class="line">(<span class="number">10</span>, <span class="number">5</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>r.size = <span class="number">150</span>,<span class="number">100</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>r.width</div><div class="line"><span class="number">150</span></div></pre></td></tr></table></figure></li><li><p>在这个新版的Retangle 中，property 函数创建了一个属性，其中访问器函数被用作参数（先取值，然后是赋值），这个属性命为size 。这样一来就不再需要担心是怎么实现的了，可以用同样的方式处理width、height 和size。</p></li></ul>]]></content:encoded>
      
      <comments>http://smartfice.com/pythonmagic/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
